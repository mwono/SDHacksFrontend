{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/message.service.ts","webpack:///./src/app/user.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,sBAAsB,yBAAyB,yBAAyB,iBAAiB,KAAK,C;;;;;;;;;;;ACA9F,mJAAmJ,SAAS,gMAAgM,yCAAyC,2BAA2B,iR;;;;;;;;;;;;;;;;;;;;;;;;;ACAtX;AAGG;AAQ7C;IAKE,sBAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAJ5C,UAAK,GAAG,UAAU,CAAC;IAI6B,CAAC;IAEjD,+BAAQ,GAAR;QACC,IAAI,CAAC,QAAQ,EAAE,CAAC;IACjB,CAAC;IAED,+BAAQ,GAAR;QAAA,iBAEC;QADA,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,eAAK,IAAI,YAAI,CAAC,KAAK,GAAG,KAAK,EAAlB,CAAkB,CAAC,CAAC;IACpE,CAAC;IAED,mCAAY,GAAZ,UAAa,EAAU;QACtB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;IACjC,CAAC;IAED,mCAAY,GAAZ,UAAa,EAAU;QACtB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,UAAU,GAAG,KAAK,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;IACjC,CAAC;IAxBU,YAAY;QANxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAOiC,yDAAW;OALjC,YAAY,CAyBxB;IAAD,mBAAC;CAAA;AAzBwB;;;;;;;;;;;;;;;;;;;;;;;;;ACXiC;AACN;AACP;AAGE;AAe/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAZrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;aACZ;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OAEW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;ACpBqB;AAK3C;IAGG;QAFF,aAAQ,GAAa,EAAE,CAAC;IAEN,CAAC;IAEjB,4BAAG,GAAH,UAAI,OAAe;QAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAED,8BAAK,GAAL;QACC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACpB,CAAC;IAXS,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;;OACW,cAAc,CAY1B;IAAD,qBAAC;CAAA;AAZ0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLgB;AACoB;AACzB;AACgB;AAGH;AAKnD;IAGE,qBAAoB,IAAgB,EAAU,cAA8B;QAAxD,SAAI,GAAJ,IAAI,CAAY;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAF5E,gBAAW,GAAG,wBAAwB,CAAC;IAEyC,CAAC;IAEjF,8BAAQ,GAAR;QAAA,iBAIC;QAHA,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,wBAAwB,CAAC;aACpD,IAAI,CAAC,0DAAG,CAAC,eAAK,IAAI,YAAI,CAAC,GAAG,CAAC,eAAe,CAAC,EAAzB,CAAyB,CAAC,EAC5C,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAS,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IAGO,yBAAG,GAAX,UAAY,OAAe;QAC1B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACpD,CAAC;IAEF;;;;;MAKE;IACM,iCAAW,GAAnB,UAAwB,SAAuB,EAAE,MAAU;QAA3D,iBAYC;QAZuB,mDAAuB;QAC7C,OAAO,UAAC,KAAU;YAEhB,wDAAwD;YACxD,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,yBAAyB;YAE/C,8DAA8D;YAC9D,KAAI,CAAC,GAAG,CAAI,SAAS,iBAAY,KAAK,CAAC,OAAS,CAAC,CAAC;YAElD,yDAAyD;YACzD,OAAO,+CAAE,CAAC,MAAW,CAAC,CAAC;QACzB,CAAC,CAAC;IACJ,CAAC;IAlCW,WAAW;QAHvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAI0B,+DAAU,EAA0B,+DAAc;OAHjE,WAAW,CAmCvB;IAAD,kBAAC;CAAA;AAnCuB;;;;;;;;;;;;;ACXxB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"img{ \\r\\n\\tmargin-left: auto;\\r\\n\\tmargin-right: auto;\\r\\n\\twidth: 30%;\\r\\n}\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to {{ title }}!\\n  </h1>\\n  <div id=\\\"carousel1\\\" class=\\\"carousel slide\\\" data-interval=false data-wrap=false>\\n    <div class=\\\"carousel-inner\\\" role=\\\"listbox\\\">\\n      <div *ngFor=\\\"let image of images; let i = index\\\" class=\\\"carousel-item {{ (i == 0) ? 'active' : ''}}\\\">\\n        <img class=\\\"d-block img-fluid w-100px\\\" *ngIf=!image.hasViewed [src]=\\\"image.resume\\\" alt=\\\"\\\">\\n        <input (onkeydown.arrowright)=\\\"acceptResume(i)\\\">\\n        <input (onkeydown.arrowleft)=\\\"rejectResume(i)\\\">\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","import { Component } from '@angular/core';\n\nimport { User } from './User';\nimport { UserService } from './user.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n  title = 'frontend';\n\n  users: User[];\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n  \tthis.getUsers();\n  }\n\n  getUsers(): void {\n  \tthis.userService.getUsers().subscribe(users => this.users = users);\n  }\n\n  acceptResume(im: number) {\n  \tconsole.log(\"Right\");\n  \tthis.users[im].hasViewed = true;\n  }\n\n  rejectResume(im: number) {\n  \tconsole.log(\"Left\");\n  \tthis.users[im].isAccepted = false;\n  \tthis.users[im].hasViewed = true;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n\tmessages: string[] = [];\n\n  \tconstructor() { }\n\n  \tadd(message: string) {\n  \t\tthis.messages.push(message);\n  \t}\n\n  \tclear() {\n  \t\tthis.messages = [];\n  \t}\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { User } from './User';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  databaseURL = 'http://localhost:8080/';\n\n  constructor(private http: HttpClient, private messageService: MessageService) { }\n\n  getUsers(): Observable<User[]> {\n  \treturn this.http.get<User[]>('http://localhost:4200/')\n  \t\t.pipe(tap(users => this.log('fetched users')),\n  \t\t\tcatchError(this.handleError<User[]>('getUsers', [])));\n  }\n\n\n  private log(message: string) {\n  \tthis.messageService.add('HeroService: ${message}');\n  }\n\n\t/**\n\t* Handle Http operation that failed.\n\t* Let the app continue.\n\t* @param operation - name of the operation that failed\n\t* @param result - optional value to return as the observable result\n\t*/\n\tprivate handleError<T> (operation = 'operation', result?: T) {\n\t  return (error: any): Observable<T> => {\n\t \n\t    // TODO: send the error to remote logging infrastructure\n\t    console.error(error); // log to console instead\n\t \n\t    // TODO: better job of transforming error for user consumption\n\t    this.log(`${operation} failed: ${error.message}`);\n\t \n\t    // Let the app keep running by returning an empty result.\n\t    return of(result as T);\n\t  };\n\t}\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}